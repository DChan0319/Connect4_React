Bachelorâ€™s degree in Computer Science or a related field and:
2 years software development experience, including at least 1 years in building easy to use and responsive web applications
Experience in any of the following highly desirable - NodeJs, Vue.Js, React, Angular, Ruby, Rails, jQuery, Mongodb, Bootstrap, NoSQL technologies (i.e. MongoDB), AWS, Tomcat;
Skills in building server-side web development stack;
Understanding and designing RESTful web services.
Please note that Poshmark will not be able to sponsor work-related visa for this role. 

Why Poshmark? 

Hello Poshmark team,

Connect4_Darren_Chan.zip contains a folder, Connect4, containing necessary files to be extracted. The readme.md file contains the step by step instructions to run the application. Please feel free to contact me if there are any problems to get the application running. 

My thought process for the solution was to first allow players to pick a color for their pieces. I used color inputs for these player colors and stored them in the state for Connect 4. After each color was determined, I focused on rendering the actual 6X7 grid. I represented the initial grid as a 2-D matrix, where each element was set to null as an "empty" slot in the game. I then knew I needed to map out each row and each individual placement and did so. After the initial empty grid was displaying I added an onClick event listener for each element in the grid to allow a piece to be placed. The logic for this was to grab the column of the element and then pass that column number into a function to determine the first "empty" null element in that column, starting from the bottom. I decided to represent a piece as a integer, 1  for player 1 and 2 for player 2 and would change the state of the board in order to render the correct color for the placement. Once pieces were able to be placed on to the board with the correct player color, I then focused on the logic to determine whether a player won. As a piece is placed, I needed to check if the player that placed the piece won by horizontal, vertical, major diagonal, minor diagonal, or even draw. I got the count of the same pieces after a placement starting from the placed piece and incremented or decremented based on the type of direction in both directions spanning out of the piece that was placed. Most of the win condition checks were at most O(3) complexity due to me initially counting the piece placed. The time complexity for the draw case in my solution is O(n^2) to determine a draw. Once these checks were completed, I changed state depending on what the outcome was and showed the correct message. I then added a new game button that would reset the board by reinitializing an empty board. At the very end I added a scoreboard and styled the application. 

Thanks,
Darren Chan 

